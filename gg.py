import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = "8333111223:AAFDHMtpGkrNV3CVeAwUHkEIkYcNtbxY5fQ"

async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = await update.message.reply_dice(emoji="üé≤")
    value = message.dice.value
    await update.message.reply_text(f"üé≤ –¢—ã –±—Ä–æ—Å–∏–ª –∫–æ—Å—Ç–∏: {value}")

async def darts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = await update.message.reply_dice(emoji="üéØ")
    value = message.dice.value
    await update.message.reply_text(f"üéØ –¢—ã –±—Ä–æ—Å–∏–ª –¥—Ä–æ—Ç–∏–∫: {value}")

async def slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = await update.message.reply_dice(emoji="üé∞")
    value = message.dice.value
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—á–∏—Ç–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –µ—Å–ª–∏ value == 64 (–¥–∂–µ–∫–ø–æ—Ç)
    if value == 64:
        result = "üéâ –î–∂–µ–∫–ø–æ—Ç! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!"
    else:
        result = f"üé∞ –ë–∞—Ä–∞–±–∞–Ω –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞: {value} ‚Äî –Ω–µ –ø–æ–≤–µ–∑–ª–æ."
    await update.message.reply_text(result)

async def mines(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("5 –º–∏–Ω", callback_data="mines_count_5"),
            InlineKeyboardButton("10 –º–∏–Ω", callback_data="mines_count_10"),
            InlineKeyboardButton("15 –º–∏–Ω", callback_data="mines_count_15")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üí£ –°–∫–æ–ª—å–∫–æ –º–∏–Ω —Ç—ã —Ö–æ—á–µ—à—å?",
        reply_markup=reply_markup
    )

async def mines_choose_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    mines_count = int(query.data.split("_")[2])
    size = 5
    context.user_data['mines'] = random.sample(range(size * size), mines_count)

    keyboard = []
    for i in range(size):
        row = []
        for j in range(size):
            index = i * size + j
            row.append(InlineKeyboardButton("‚¨úÔ∏è", callback_data=f"mine_{index}"))
        keyboard.append(row)

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"üí£ –ü–æ–ª–µ –≥–æ—Ç–æ–≤–æ! –ú–∏–Ω: {mines_count}. –í—ã–±–∏—Ä–∞–π –∫–ª–µ—Ç–∫—É:",
        reply_markup=reply_markup
    )

async def mines_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    index = int(query.data.split("_")[1])
    mines = context.user_data.get('mines', [])
    if index in mines:
        await query.edit_message_text("üí• –ë—É–º! –¢—ã –ø–æ–¥–æ—Ä–≤–∞–ª—Å—è.")
    else:
        await query.edit_message_text("‚úÖ –ß–∏—Å—Ç–æ! –ü–æ–≤–µ–∑–ª–æ.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∫–∞–∑–∏–Ω–æ-–±–æ—Ç.\n"
        "/dice - –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏\n"
        "/darts - –±—Ä–æ—Å–∏—Ç—å –¥–∞—Ä—Ç—Å\n"
        "/slot - –∫—Ä—É—Ç–∞–Ω—É—Ç—å —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É\n"
        "/mines - —Å—ã–≥—Ä–∞—Ç—å –≤ –º–∏–Ω—ã"
    )

# === MAIN ===
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("dice", dice))
    app.add_handler(CommandHandler("darts", darts))
    app.add_handler(CommandHandler("slot", slot))
    app.add_handler(CommandHandler("mines", mines))
    app.add_handler(CallbackQueryHandler(mines_choose_count, pattern=r"^mines_count_"))
    app.add_handler(CallbackQueryHandler(mines_button, pattern=r"^mine_"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()