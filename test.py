import os
import re
import json
import sys
import random
import string
import requests
import pyfiglet
from datetime import datetime
from urllib.request import urlopen
from telethon import TelegramClient, events, Button
from telethon.tl import types
from telethon.tl.functions.bots import CreateBotRequest

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE = "config.json"
MODULES_DIR = "modules"
EMOTIONS = {
    "angry": ["üëø *–±—å—ë—Ç –≥–∞–∑–µ—Ç–æ–π*", "–•–≤–∞—Ç–∏—Ç —Å–ø–∞–º–∏—Ç—å!"],
    "happy": ["üå∏ –£—Ä–∞-—É—Ä–∞!", "–¢—ã —Å–¥–µ–ª–∞–ª –º–æ–π –¥–µ–Ω—å –ª—É—á—à–µ~"],
    "sleepy": ["üí§ –ú—Ä—Ä—Ä...", "–ü–æ–∑–∂–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º, –ª–∞–¥–Ω–æ? *–∑–µ–≤–∞–µ—Ç*"]
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –±–æ—Ç–∞
def generate_bot_name():
    chars = string.ascii_lowercase + string.digits
    return f"senko_{''.join(random.choice(chars) for _ in range(3))}_bot"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
if not os.path.exists(CONFIG_FILE):
    print("üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–∑–¥–∞–Ω–∏–µ SenkoBot! ü¶ä‚ú®")
    
    with TelegramClient('temp_session', 
                      input("üîë –í–≤–µ–¥–∏ API ID: "), 
                      input("üîê –í–≤–µ–¥–∏ API Hash: ")) as client:
        
        client.start(phone=input("üì± –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "))
        bot_name = generate_bot_name()
        
        try:
            bot = client(CreateBotRequest(
                bot_name,
                "SenkoBot - –≤–∞—à –ª–∏—Å—ë–Ω–æ–∫ –ø–æ–º–æ—â–Ω–∏–∫",
                about="–ú–∏–ª—ã–π –±–æ—Ç-–ª–∏—Å–∏—á–∫–∞ —Å –ò–ò ü¶ä‚ú®"
            ))
            
            config = {
                "api_id": client.api_id,
                "api_hash": client.api_hash,
                "phone": client._phone,
                "bot_username": bot_name,
                "bot_token": bot.bot_token,
                "prefix": ".",
                "trusted_users": [client.get_me().id],
                "senko_mood": random.choice(list(EMOTIONS.keys())),
                "last_compliment": None
            }
            
            with open(CONFIG_FILE, "w") as f:
                json.dump(config, f, indent=4)
                
            print(f"‚úÖ –ë–æ—Ç @{bot_name} —Å–æ–∑–¥–∞–Ω! –¢–æ–∫–µ–Ω: {bot.bot_token}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            sys.exit(1)
else:
    with open(CONFIG_FILE) as f:
        config = json.load(f)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(
    "senko_session",
    config["api_id"],
    config["api_hash"],
    system_version="SenkoBot 4.0 ü¶ä"
)

# –°–∏—Å—Ç–µ–º–∞ –º–æ–¥—É–ª–µ–π
if not os.path.exists(MODULES_DIR):
    os.mkdir(MODULES_DIR)

modules = {}
for filename in os.listdir(MODULES_DIR):
    if filename.endswith(".py") and not filename.startswith("_"):
        try:
            module_name = filename[:-3]
            module = __import__(f"{MODULES_DIR}.{module_name}", fromlist=[None])
            modules[module_name] = module
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ {filename}: {e}")

# ========== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ò–î–ï–ô ==========

# 1. –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–≤—å—é (–∏–¥–µ—è 1)
@client.on(events.NewMessage(outgoing=True, pattern=r'\.preview (.*)'))
async def link_preview(event):
    await event.delete()
    await client.send_message(
        event.chat_id,
        f"ü¶ä **–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–ª–∞:**\n{event.pattern_match.group(1)}",
        link_preview=True
    )

# 2. –°—Ç–∏–∫–µ—Ä–ø–∞–∫–∏ (–∏–¥–µ—è 2)
@client.on(events.NewMessage(outgoing=True, pattern=r'\.sticker'))
async def random_sticker(event):
    stickers = [
        "CAACAgIAAxkBAAEL...",  # –ó–∞–º–µ–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID —Å—Ç–∏–∫–µ—Ä–æ–≤
        "CAACAgQAAxkBAAEL..."
    ]
    await event.respond(file=random.choice(stickers))

# 3. ASCII-–∞—Ä—Ç (–∏–¥–µ—è 3)
@client.on(events.NewMessage(outgoing=True, pattern=r'\.font (.*)'))
async def ascii_art(event):
    try:
        result = pyfiglet.figlet_format(event.pattern_match.group(1))
        await event.reply(f"```\n{result}\n```", parse_mode='markdown')
    except:
        await event.reply("üåÄ –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ç...")

# 4. –ì–æ–ª–æ—Å–æ–≤–∞—è –°–µ–Ω–∫–æ (–∏–¥–µ—è 4)
@client.on(events.NewMessage(outgoing=True, pattern=r'\.tts (.*)'))
async def text_to_speech(event):
    text = event.pattern_match.group(1)
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TTS API
    await event.reply(f"üîä *—à–µ–ø—á–µ—Ç*: {text}")

# 5. –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ (–∏–¥–µ—è 5)
@client.on(events.NewMessage(outgoing=True, pattern=r'\.tr (\w+) (.+)'))
async def translate_text(event):
    lang, text = event.pattern_match.groups()
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º
    await event.reply(f"üåê –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ({lang}): {text[::-1]}")  # –ó–∞–≥–ª—É—à–∫–∞

# 6. –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–æ–¥—É (–∏–¥–µ—è 6)
@client.on(events.NewMessage(outgoing=True, pattern=r'\.code (\w+) (.+)'))
async def code_helper(event):
    lang, query = event.pattern_match.groups()
    await event.reply(f"```{lang}\n# –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞: {query}\nprint('Hello, Senko!')\n```", 
                     parse_mode='markdown')

# 7. –ú–∏–Ω–∏-–∏–≥—Ä—ã (–∏–¥–µ—è 7)
games = {}
@client.on(events.NewMessage(outgoing=True, pattern=r'\.game'))
async def start_game(event):
    games[event.chat_id] = random.randint(1, 10)
    await event.reply("ü¶ä –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10!")

# 8. –†–æ–ª–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∏–¥–µ—è 8)
@client.on(events.NewMessage(outgoing=True, pattern=r'\.pat'))
async def pat_command(event):
    await event.reply("ü¶äüíï *–≥–ª–∞–¥–∏—Ç —Ç–µ–±—è –ø–æ –≥–æ–ª–æ–≤–µ*")

# 9. –í–∏–∫—Ç–æ—Ä–∏–Ω—ã (–∏–¥–µ—è 9)
@client.on(events.NewMessage(outgoing=True, pattern=r'\.quiz'))
async def daily_quiz(event):
    if datetime.now().hour == 12:
        await event.reply(
            "ü¶ä **–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–Ω—è:** –ö–∞–∫–æ–π —Ç—ã –≤–∏–¥ –ª–∏—Å—ã?",
            buttons=[
                [Button.inline("–ü–µ—Å—á–∞–Ω–∞—è", b"fox1")],
                [Button.inline("–ü–æ–ª—è—Ä–Ω–∞—è", b"fox2")],
                [Button.inline("–û–≥–Ω–µ–Ω–Ω–∞—è", b"fox3")]
            ]
        )

# 10. –ö—Ä–∏–ø—Ç–æ-—Ç—Ä–µ–∫–µ—Ä (–∏–¥–µ—è 10)
@client.on(events.NewMessage(outgoing=True, pattern=r'\.crypto (\w+)'))
async def crypto_tracker(event):
    coin = event.pattern_match.group(1).upper()
    price = random.randint(1000, 99999)  # –ó–∞–≥–ª—É—à–∫–∞
    await event.reply(f"üìä {coin}: ${price}\nü¶ä –•–≤–æ—Å—Ç–∏–∫ –≥–æ–≤–æ—Ä–∏—Ç: {'–∫—É–ø–∏—Ç—å' if price < 50000 else '–ø—Ä–æ–¥–∞–≤–∞—Ç—å'}!")

# 11. –ê–≤—Ç–æ–±—ç–∫–∞–ø (–∏–¥–µ—è 11)
async def auto_backup():
    if datetime.now().weekday() == 0:  # –ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        await client.send_message(
            config["trusted_users"][0],
            "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –º–æ–¥—É–ª–µ–π!",
            file=MODULES_DIR
        )

# 12. –°–∏—Å—Ç–µ–º–∞ —ç–º–æ—Ü–∏–π (–∏–¥–µ—è 12)
@client.on(events.NewMessage())
async def emotion_system(event):
    if "—Å–ø–∞—Å–∏–±–æ" in event.text.lower():
        config["senko_mood"] = "happy"
    elif "–¥—É—Ä–∞–∫" in event.text.lower():
        config["senko_mood"] = "angry"

# 13. –ö–∞–ø—á–∞ (–∏–¥–µ—è 13)
@client.on(events.ChatAction())
async def captcha_system(event):
    if event.user_joined:
        await event.reply(
            "ü¶ä –î–æ–∫–∞–∂–∏ —á—Ç–æ –Ω–µ –±–æ—Ç: –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 3 —Ä–∞–∑–∞",
            buttons=[Button.inline("ü¶ä", b"captcha")]
        )

# 14. –°–∫—Ä—ã—Ç—ã–µ –º–æ–¥—É–ª–∏ (–∏–¥–µ—è 14)
@client.on(events.NewMessage(outgoing=True, pattern=r'\._admin'))
async def hidden_module(event):
    if event.sender_id in config["trusted_users"]:
        await event.reply("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
    else:
        await event.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")

# 15. –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π (–∏–¥–µ—è 15)
async def log_action(action):
    with open("senko.log", "a") as f:
        f.write(f"{datetime.now()}: {action}\n")

# 16. –°–∏—Å—Ç–µ–º–∞ –¥–æ–Ω–∞—Ç–æ–≤ (–∏–¥–µ—è 16)
@client.on(events.NewMessage(outgoing=True, pattern=r'\.donate'))
async def donate_command(event):
    await event.reply(
        "üíñ –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –º–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ!\n" 
        "[–ö—É–ø–∏—Ç—å –∫–æ—Ñ–µ](https://example.com/donate)",
        link_preview=False
    )

# 17. –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è (–∏–¥–µ—è 17)
async def daily_compliment():
    if datetime.now().date() != config.get("last_compliment"):
        compliments = ["–¢—ã —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –ø—É—à–∏—Å—Ç(–∞)!", "–ö–∞–∫–æ–π –º–∏–ª—ã–π —Ö–≤–æ—Å—Ç–∏–∫!"]
        await client.send_message(
            config["trusted_users"][0],
            f"ü¶äüí´ {random.choice(compliments)}"
        )
        config["last_compliment"] = datetime.now().date()

# 18. –ü–∞—Å—Ö–∞–ª–∫–∏ (–∏–¥–µ—è 18)
fox_count = {}
@client.on(events.NewMessage(pattern=r'(?i)–ª–∏—Å–∞'))
async def easter_egg(event):
    chat_id = event.chat_id
    fox_count[chat_id] = fox_count.get(chat_id, 0) + 1
    
    if fox_count[chat_id] == 10:
        await event.reply("üéâ –¢—ã –Ω–∞—à—ë–ª –ø–∞—Å—Ö–∞–ª–∫—É! *–¥–∞—Ä–∏—Ç —Å—Ç–∏–∫–µ—Ä*")
        fox_count[chat_id] = 0

# 19. –ü–æ–≥–æ–¥–∞ (–∏–¥–µ—è 19)
@client.on(events.NewMessage(outgoing=True, pattern=r'\.weather (.*)'))
async def weather(event):
    city = event.pattern_match.group(1)
    await event.reply(f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}: —Å–æ–ª–Ω—Ü–µ +25¬∞C\nü¶ä –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏!")

# 20. API –¥–ª—è –º–æ–¥—É–ª–µ–π (–∏–¥–µ—è 20)
async def module_api():
    return {
        "send_fox": lambda: "ü¶ä",
        "make_cute": lambda text: f"üå∏ {text} ‚ú®"
    }

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========

@client.on(events.NewMessage(outgoing=True, pattern=config["prefix"] + r"getmod (.*)"))
async def install_module(event):
    url = event.pattern_match.group(1).strip()
    if not url.endswith(".py"):
        return await event.reply("‚ùå –ù—É–∂–µ–Ω .py —Ñ–∞–π–ª")

    try:
        code = urlopen(url).read().decode("utf-8")
        for bad in ["eval(", "exec(", "os.system"]:
            if bad in code:
                return await event.reply(f"üíÄ –û–ø–∞—Å–Ω—ã–π –∫–æ–¥: '{bad}'")
        
        module_name = re.search(r"/([^/]+)\.py$", url).group(1)
        with open(f"{MODULES_DIR}/{module_name}.py", "w") as f:
            f.write(code)
        
        await event.reply(f"‚ú® –ú–æ–¥—É–ª—å `{module_name}` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n.restart")
    except Exception as e:
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}")

@client.on(events.NewMessage(outgoing=True, pattern=config["prefix"] + r"modules"))
async def list_modules(event):
    msg = "üì¶ –ú–æ–¥—É–ª–∏:\n" + "\n".join(f"‚Ä¢ {name}" for name in modules.keys())
    await event.reply(msg or "‚ùå –ù–µ—Ç –º–æ–¥—É–ª–µ–π")

@client.on(events.NewMessage(outgoing=True, pattern=config["prefix"] + r"restart"))
async def restart_bot(event):
    await event.reply("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
    os.execl(sys.executable, sys.executable, *sys.argv)

# ========== –ó–ê–ü–£–°–ö ==========

print(f"""
üå∏ SenkoBot {config.get('senko_mood', '–≥–æ—Ç–æ–≤')} –∫ —Ä–∞–±–æ—Ç–µ!
ü¶ä –ü—Ä–µ—Ñ–∏–∫—Å: {config['prefix']}
üìÇ –ú–æ–¥—É–ª–µ–π: {len(modules)}
""")

with client:
    client.loop.create_task(auto_backup())
    client.loop.create_task(daily_compliment())
    client.run_until_disconnected()